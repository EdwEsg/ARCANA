// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RDF.Arcana.API.Data;

#nullable disable

namespace RDF.Arcana.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RDF.Arcana.API.Domain.ApprovedClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("approved_by");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("DateApproved")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_approved");

                    b.Property<int>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("is_active");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_approved_clients");

                    b.HasIndex("ApprovedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_approved_clients_approved_by");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_approved_clients_client_id");

                    b.HasIndex("Status")
                        .IsUnique()
                        .HasDatabaseName("ix_approved_clients_status");

                    b.ToTable("approved_clients", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<string>("BookingCoverage")
                        .HasColumnType("longtext")
                        .HasColumnName("booking_coverage");

                    b.Property<string>("BusinessAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("business_address");

                    b.Property<string>("BusinessName")
                        .HasColumnType("longtext")
                        .HasColumnName("business_name");

                    b.Property<string>("BusinessType")
                        .HasColumnType("longtext")
                        .HasColumnName("business_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomerType")
                        .HasColumnType("longtext")
                        .HasColumnName("customer_type");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_of_birth");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<bool>("DirectDelivery")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("direct_delivery");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("discount_id");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("email_address");

                    b.Property<bool>("Freezer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("freezer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("OwnersAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("owners_address");

                    b.Property<string>("OwnersName")
                        .HasColumnType("longtext")
                        .HasColumnName("owners_name");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("longtext")
                        .HasColumnName("payment_method");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<int?>("TermDaysId")
                        .HasColumnType("int")
                        .HasColumnName("term_days_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_clients_added_by");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_clients_department_id");

                    b.HasIndex("DiscountId")
                        .HasDatabaseName("ix_clients_discount_id");

                    b.HasIndex("ModifiedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_clients_modified_by");

                    b.HasIndex("TermDaysId")
                        .HasDatabaseName("ix_clients_term_days_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_clients_user_id");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext")
                        .HasColumnName("company_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_added_by");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("longtext")
                        .HasColumnName("department_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_departments_added_by");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<decimal>("CommissionRateLower")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("commission_rate_lower");

                    b.Property<decimal>("CommissionRateUpper")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("commission_rate_upper");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<decimal>("LowerBound")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("lower_bound");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<decimal>("UpperBound")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("upper_bound");

                    b.HasKey("Id")
                        .HasName("pk_discounts");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_discounts_added_by");

                    b.ToTable("discounts", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ItemCode")
                        .HasColumnType("longtext")
                        .HasColumnName("item_code");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("item_description");

                    b.Property<int>("MeatTypeId")
                        .HasColumnType("int")
                        .HasColumnName("meat_type_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<int>("ProductSubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("product_sub_category_id");

                    b.Property<int>("UomId")
                        .HasColumnType("int")
                        .HasColumnName("uom_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_items_added_by");

                    b.HasIndex("MeatTypeId")
                        .HasDatabaseName("ix_items_meat_type_id");

                    b.HasIndex("ProductSubCategoryId")
                        .HasDatabaseName("ix_items_product_sub_category_id");

                    b.HasIndex("UomId")
                        .HasDatabaseName("ix_items_uom_id");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("LocationName")
                        .HasColumnType("longtext")
                        .HasColumnName("location_name");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_locations_added_by");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.MeatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("MeatTypeName")
                        .HasColumnType("longtext")
                        .HasColumnName("meat_type_name");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_meat_types");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_meat_types_added_by");

                    b.ToTable("meat_types", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Permit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("BusinessPermit")
                        .HasColumnType("longtext")
                        .HasColumnName("business_permit");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_permit");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_permit_client_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_permit_user_id");

                    b.ToTable("permit", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<string>("ProductCategoryName")
                        .HasColumnType("longtext")
                        .HasColumnName("product_category_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_categories");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_product_categories_added_by");

                    b.ToTable("product_categories", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("product_category_id");

                    b.Property<string>("ProductSubCategoryName")
                        .HasColumnType("longtext")
                        .HasColumnName("product_sub_category_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_sub_categories");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_product_sub_categories_added_by");

                    b.HasIndex("ProductCategoryId")
                        .HasDatabaseName("ix_product_sub_categories_product_category_id");

                    b.ToTable("product_sub_categories", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.RejectedClients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("DateRejected")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_rejected");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<int>("RejectedBy")
                        .HasColumnType("int")
                        .HasColumnName("rejected_by");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_rejected_clients");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_rejected_clients_client_id");

                    b.HasIndex("RejectedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_rejected_clients_rejected_by");

                    b.HasIndex("Status")
                        .IsUnique()
                        .HasDatabaseName("ix_rejected_clients_status");

                    b.ToTable("rejected_clients", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.RequestedClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("DateRequest")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_request");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int")
                        .HasColumnName("requested_by");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_requested_clients");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_requested_clients_client_id");

                    b.HasIndex("RequestedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_requested_clients_requested_by");

                    b.HasIndex("Status")
                        .IsUnique()
                        .HasDatabaseName("ix_requested_clients_status");

                    b.ToTable("requested_clients", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("StatusName")
                        .HasColumnType("longtext")
                        .HasColumnName("status_name");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_status");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_status_added_by");

                    b.HasIndex("ModifiedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_status_modified_by");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.TermDays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<int>("Days")
                        .HasColumnType("int")
                        .HasColumnName("days");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_term_days");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_term_days_added_by");

                    b.ToTable("term_days", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Uom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<string>("UomCode")
                        .HasColumnType("longtext")
                        .HasColumnName("uom_code");

                    b.Property<string>("UomDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("uom_description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_uoms");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_uoms_added_by");

                    b.ToTable("uoms", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("Fullname")
                        .HasColumnType("longtext")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("user_role_id");

                    b.Property<string>("Username")
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_users_added_by");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_users_company_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_users_department_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_users_location_id");

                    b.HasIndex("UserRoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_user_role_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<string>("Permissions")
                        .HasColumnType("longtext")
                        .HasColumnName("permissions");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserRoleName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_role_name");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_user_roles_added_by");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ApprovedClient", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "ApprovedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.ApprovedClient", "ApprovedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approved_clients_users_approved_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approved_clients_clients_client_id");

                    b.HasOne("RDF.Arcana.API.Domain.Status", "ApprovedStatus")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.ApprovedClient", "Status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approved_clients_status_approved_status_id");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("ApprovedStatus");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Client", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Client", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_clients_departments_department_id");

                    b.HasOne("RDF.Arcana.API.Domain.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("fk_clients_discounts_discount_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ModifiedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Client", "ModifiedBy")
                        .HasConstraintName("fk_clients_users_modified_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.TermDays", "TermDays")
                        .WithMany()
                        .HasForeignKey("TermDaysId")
                        .HasConstraintName("fk_clients_term_days_term_days_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_clients_users_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Department");

                    b.Navigation("Discount");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TermDays");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Company", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Company", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_companies_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Department", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Department", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departments_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Discount", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Discount", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discounts_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Items", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Items", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_users_added_by");

                    b.HasOne("RDF.Arcana.API.Domain.MeatType", "MeatType")
                        .WithMany()
                        .HasForeignKey("MeatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_meat_types_meat_type_id");

                    b.HasOne("RDF.Arcana.API.Domain.ProductSubCategory", "ProductSubCategory")
                        .WithMany()
                        .HasForeignKey("ProductSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_product_sub_categories_product_sub_category_id");

                    b.HasOne("RDF.Arcana.API.Domain.Uom", "Uom")
                        .WithMany("Items")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_uoms_uom_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("MeatType");

                    b.Navigation("ProductSubCategory");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Location", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Location", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.MeatType", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.MeatType", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meat_types_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Permit", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Client", "Client")
                        .WithOne("Permit")
                        .HasForeignKey("RDF.Arcana.API.Domain.Permit", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permit_clients_client_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_permit_users_user_id");

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductCategory", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.ProductCategory", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_categories_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductSubCategory", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.ProductSubCategory", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_sub_categories_users_added_by");

                    b.HasOne("RDF.Arcana.API.Domain.ProductCategory", "ProductCategory")
                        .WithMany("ProductSubCategory")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_sub_categories_product_categories_product_category_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.RejectedClients", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rejected_clients_clients_client_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "RejectedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.RejectedClients", "RejectedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rejected_clients_users_rejected_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Status", "RejectedStatus")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.RejectedClients", "Status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rejected_clients_status_rejected_status_id");

                    b.Navigation("Client");

                    b.Navigation("RejectedByUser");

                    b.Navigation("RejectedStatus");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.RequestedClient", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requested_clients_clients_client_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "RequestedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.RequestedClient", "RequestedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requested_clients_users_requested_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Status", "RequestStatus")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.RequestedClient", "Status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requested_clients_status_request_status_id");

                    b.Navigation("Client");

                    b.Navigation("RequestStatus");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Status", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Status", "AddedBy")
                        .HasConstraintName("fk_status_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ModifiedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Status", "ModifiedBy")
                        .HasConstraintName("fk_status_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.TermDays", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.TermDays", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_term_days_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Uom", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Uom", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_uoms_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.User", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.User", "AddedBy")
                        .HasConstraintName("fk_users_users_added_by");

                    b.HasOne("RDF.Arcana.API.Domain.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_users_companies_company_id");

                    b.HasOne("RDF.Arcana.API.Domain.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_users_departments_department_id");

                    b.HasOne("RDF.Arcana.API.Domain.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_users_locations_location_id");

                    b.HasOne("RDF.Arcana.API.Domain.UserRoles", "UserRoles")
                        .WithOne("User")
                        .HasForeignKey("RDF.Arcana.API.Domain.User", "UserRoleId")
                        .HasConstraintName("fk_users_user_roles_user_role_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Location");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.UserRoles", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.UserRoles", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Client", b =>
                {
                    b.Navigation("Permit");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Location", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductCategory", b =>
                {
                    b.Navigation("ProductSubCategory");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Uom", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.User", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.UserRoles", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
