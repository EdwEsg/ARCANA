// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RDF.Arcana.API.Data;

#nullable disable

namespace RDF.Arcana.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231027101004_AddLockOutMechanismToAuthentication")]
    partial class AddLockOutMechanismToAuthentication
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RDF.Arcana.API.Domain.Approvals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ApprovalType")
                        .HasColumnType("longtext")
                        .HasColumnName("approval_type");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("approved_by");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_approved");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int")
                        .HasColumnName("requested_by");

                    b.HasKey("Id")
                        .HasName("pk_approvals");

                    b.HasIndex("ApprovedBy")
                        .HasDatabaseName("ix_approvals_approved_by");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_approvals_client_id");

                    b.HasIndex("RequestedBy")
                        .HasDatabaseName("ix_approvals_requested_by");

                    b.ToTable("approvals", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.BookingCoverages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<string>("BookingCoverage")
                        .HasColumnType("longtext")
                        .HasColumnName("booking_coverage");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_booking_coverages");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_booking_coverages_added_by");

                    b.ToTable("booking_coverages", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.BusinessAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Barangay")
                        .HasColumnType("longtext")
                        .HasColumnName("barangay");

                    b.Property<string>("City")
                        .HasColumnType("longtext")
                        .HasColumnName("city");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("house_number");

                    b.Property<string>("Province")
                        .HasColumnType("longtext")
                        .HasColumnName("province");

                    b.Property<string>("StreetName")
                        .HasColumnType("longtext")
                        .HasColumnName("street_name");

                    b.HasKey("Id")
                        .HasName("pk_business_address");

                    b.ToTable("business_address", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ClientDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("longtext")
                        .HasColumnName("document_path");

                    b.Property<string>("DocumentType")
                        .HasColumnType("longtext")
                        .HasColumnName("document_type");

                    b.HasKey("Id")
                        .HasName("pk_client_documents");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_documents_client_id");

                    b.ToTable("client_documents", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Clients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<int?>("BookingCoverageId")
                        .HasColumnType("int")
                        .HasColumnName("booking_coverage_id");

                    b.Property<int?>("BusinessAddressId")
                        .HasColumnType("int")
                        .HasColumnName("business_address_id");

                    b.Property<string>("BusinessName")
                        .HasColumnType("longtext")
                        .HasColumnName("business_name");

                    b.Property<string>("ClientType")
                        .HasColumnType("longtext")
                        .HasColumnName("client_type");

                    b.Property<int>("Cluster")
                        .HasColumnType("int")
                        .HasColumnName("cluster");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomerType")
                        .HasColumnType("longtext")
                        .HasColumnName("customer_type");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<bool?>("DirectDelivery")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("direct_delivery");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("discount_id");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("email_address");

                    b.Property<int?>("FixedDiscountId")
                        .HasColumnType("int")
                        .HasColumnName("fixed_discount_id");

                    b.Property<bool>("Freezer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("freezer");

                    b.Property<string>("Fullname")
                        .HasColumnType("longtext")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext")
                        .HasColumnName("longitude");

                    b.Property<int?>("ModeOfPayment")
                        .HasColumnType("int")
                        .HasColumnName("mode_of_payment");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("Origin")
                        .HasColumnType("longtext")
                        .HasColumnName("origin");

                    b.Property<int>("OwnersAddressId")
                        .HasColumnType("int")
                        .HasColumnName("owners_address_id");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<string>("RegistrationStatus")
                        .HasColumnType("longtext")
                        .HasColumnName("registration_status");

                    b.Property<string>("RepresentativeName")
                        .HasColumnType("longtext")
                        .HasColumnName("representative_name");

                    b.Property<string>("RepresentativePosition")
                        .HasColumnType("longtext")
                        .HasColumnName("representative_position");

                    b.Property<int?>("StoreTypeId")
                        .HasColumnType("int")
                        .HasColumnName("store_type_id");

                    b.Property<int?>("TermDays")
                        .HasColumnType("int")
                        .HasColumnName("term_days");

                    b.Property<int?>("Terms")
                        .HasColumnType("int")
                        .HasColumnName("terms");

                    b.Property<string>("TinNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("tin_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<bool?>("VariableDiscount")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("variable_discount");

                    b.Property<int?>("VariableDiscountsId")
                        .HasColumnType("int")
                        .HasColumnName("variable_discounts_id");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_clients_added_by");

                    b.HasIndex("BookingCoverageId")
                        .HasDatabaseName("ix_clients_booking_coverage_id");

                    b.HasIndex("BusinessAddressId")
                        .HasDatabaseName("ix_clients_business_address_id");

                    b.HasIndex("FixedDiscountId")
                        .HasDatabaseName("ix_clients_fixed_discount_id");

                    b.HasIndex("ModeOfPayment")
                        .HasDatabaseName("ix_clients_mode_of_payment");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_clients_modified_by");

                    b.HasIndex("OwnersAddressId")
                        .HasDatabaseName("ix_clients_owners_address_id");

                    b.HasIndex("StoreTypeId")
                        .HasDatabaseName("ix_clients_store_type_id");

                    b.HasIndex("Terms")
                        .HasDatabaseName("ix_clients_terms");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_clients_user_id");

                    b.HasIndex("VariableDiscountsId")
                        .HasDatabaseName("ix_clients_variable_discounts_id");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext")
                        .HasColumnName("company_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_added_by");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("longtext")
                        .HasColumnName("department_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_departments_added_by");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<decimal>("CommissionRateLower")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("commission_rate_lower");

                    b.Property<decimal>("CommissionRateUpper")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("commission_rate_upper");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<decimal>("LowerBound")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("lower_bound");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<decimal>("UpperBound")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("upper_bound");

                    b.HasKey("Id")
                        .HasName("pk_discounts");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_discounts_added_by");

                    b.ToTable("discounts", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.FixedDiscounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("discount_percentage");

                    b.HasKey("Id")
                        .HasName("pk_fixed_discounts");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_fixed_discounts_client_id");

                    b.ToTable("fixed_discounts", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.FreebieItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.HasKey("Id")
                        .HasName("pk_freebie_items");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_freebie_items_item_id");

                    b.HasIndex("RequestId")
                        .HasDatabaseName("ix_freebie_items_request_id");

                    b.ToTable("freebie_items", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.FreebieRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ApprovalsId")
                        .HasColumnType("int")
                        .HasColumnName("approvals_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("ESignaturePath")
                        .HasColumnType("longtext")
                        .HasColumnName("e_signature_path");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_delivered");

                    b.Property<string>("PhotoProofPath")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_proof_path");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int")
                        .HasColumnName("requested_by");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_freebie_requests");

                    b.HasIndex("ApprovalsId")
                        .HasDatabaseName("ix_freebie_requests_approvals_id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_freebie_requests_client_id");

                    b.HasIndex("RequestedBy")
                        .HasDatabaseName("ix_freebie_requests_requested_by");

                    b.ToTable("freebie_requests", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ItemCode")
                        .HasColumnType("longtext")
                        .HasColumnName("item_code");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("item_description");

                    b.Property<int>("MeatTypeId")
                        .HasColumnType("int")
                        .HasColumnName("meat_type_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<int>("ProductSubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("product_sub_category_id");

                    b.Property<int>("UomId")
                        .HasColumnType("int")
                        .HasColumnName("uom_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_items_added_by");

                    b.HasIndex("MeatTypeId")
                        .HasDatabaseName("ix_items_meat_type_id");

                    b.HasIndex("ProductSubCategoryId")
                        .HasDatabaseName("ix_items_product_sub_category_id");

                    b.HasIndex("UomId")
                        .HasDatabaseName("ix_items_uom_id");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ListingFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ApprovalsId")
                        .HasColumnType("int")
                        .HasColumnName("approvals_id");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("approved_by");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateOnly>("CratedAt")
                        .HasColumnType("date")
                        .HasColumnName("crated_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_delivered");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int")
                        .HasColumnName("requested_by");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("total");

                    b.HasKey("Id")
                        .HasName("pk_listing_fees");

                    b.HasIndex("ApprovalsId")
                        .HasDatabaseName("ix_listing_fees_approvals_id");

                    b.HasIndex("ApprovedBy")
                        .HasDatabaseName("ix_listing_fees_approved_by");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_listing_fees_client_id");

                    b.HasIndex("RequestedBy")
                        .HasDatabaseName("ix_listing_fees_requested_by");

                    b.ToTable("listing_fees", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ListingFeeItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int>("ListingFeeId")
                        .HasColumnType("int")
                        .HasColumnName("listing_fee_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("Sku")
                        .HasColumnType("int")
                        .HasColumnName("sku");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("unit_cost");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_listing_fee_items");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_listing_fee_items_item_id");

                    b.HasIndex("ListingFeeId")
                        .HasDatabaseName("ix_listing_fee_items_listing_fee_id");

                    b.ToTable("listing_fee_items", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("LocationName")
                        .HasColumnType("longtext")
                        .HasColumnName("location_name");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_locations_added_by");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.MeatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("MeatTypeName")
                        .HasColumnType("longtext")
                        .HasColumnName("meat_type_name");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_meat_types");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_meat_types_added_by");

                    b.ToTable("meat_types", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ModeOfPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Payment")
                        .HasColumnType("longtext")
                        .HasColumnName("payment");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_mode_of_payments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_mode_of_payments_added_by");

                    b.ToTable("mode_of_payments", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.OwnersAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Barangay")
                        .HasColumnType("longtext")
                        .HasColumnName("barangay");

                    b.Property<string>("City")
                        .HasColumnType("longtext")
                        .HasColumnName("city");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("house_number");

                    b.Property<string>("Province")
                        .HasColumnType("longtext")
                        .HasColumnName("province");

                    b.Property<string>("StreetName")
                        .HasColumnType("longtext")
                        .HasColumnName("street_name");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<string>("ProductCategoryName")
                        .HasColumnType("longtext")
                        .HasColumnName("product_category_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_categories");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_product_categories_added_by");

                    b.ToTable("product_categories", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("product_category_id");

                    b.Property<string>("ProductSubCategoryName")
                        .HasColumnType("longtext")
                        .HasColumnName("product_sub_category_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_sub_categories");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_product_sub_categories_added_by");

                    b.HasIndex("ProductCategoryId")
                        .HasDatabaseName("ix_product_sub_categories_product_category_id");

                    b.ToTable("product_sub_categories", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.StoreType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("StoreTypeName")
                        .HasColumnType("longtext")
                        .HasColumnName("store_type_name");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("pk_store_types");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_store_types_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_store_types_modified_by");

                    b.ToTable("store_types", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.TermDays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<int>("Days")
                        .HasColumnType("int")
                        .HasColumnName("days");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_term_days");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_term_days_added_by");

                    b.ToTable("term_days", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.TermOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreditLimit")
                        .HasColumnType("int")
                        .HasColumnName("credit_limit");

                    b.Property<int?>("TermDaysId")
                        .HasColumnType("int")
                        .HasColumnName("term_days_id");

                    b.Property<int>("TermsId")
                        .HasColumnType("int")
                        .HasColumnName("terms_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_term_options");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_term_options_added_by");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_term_options_client_id");

                    b.HasIndex("TermDaysId")
                        .HasDatabaseName("ix_term_options_term_days_id");

                    b.HasIndex("TermsId")
                        .HasDatabaseName("ix_term_options_terms_id");

                    b.ToTable("term_options", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Terms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("TermType")
                        .HasColumnType("longtext")
                        .HasColumnName("term_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_terms");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_terms_added_by");

                    b.ToTable("terms", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Uom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<string>("UomCode")
                        .HasColumnType("longtext")
                        .HasColumnName("uom_code");

                    b.Property<string>("UomDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("uom_description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_uoms");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_uoms_added_by");

                    b.ToTable("uoms", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("FullIdNo")
                        .HasColumnType("longtext")
                        .HasColumnName("full_id_no");

                    b.Property<string>("Fullname")
                        .HasColumnType("longtext")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPasswordChanged")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_password_changed");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserRolesId")
                        .HasColumnType("int")
                        .HasColumnName("user_roles_id");

                    b.Property<string>("Username")
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_users_added_by");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_users_company_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_users_department_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_users_location_id");

                    b.HasIndex("UserRolesId")
                        .HasDatabaseName("ix_users_user_roles_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.UserPasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("longtext")
                        .HasColumnName("hashed_password");

                    b.Property<DateTime>("SetDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("set_date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_password_histories");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_password_histories_user_id");

                    b.ToTable("user_password_histories", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<string>("Permissions")
                        .HasColumnType("longtext")
                        .HasColumnName("permissions");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserRoleName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_role_name");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_user_roles_added_by");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.VariableDiscounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSubjectToApproval")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_subject_to_approval");

                    b.Property<decimal>("MaximumAmount")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("maximum_amount");

                    b.Property<decimal>("MaximumPercentage")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("maximum_percentage");

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("minimum_amount");

                    b.Property<decimal>("MinimumPercentage")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("minimum_percentage");

                    b.HasKey("Id")
                        .HasName("pk_variable_discounts");

                    b.ToTable("variable_discounts", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Approvals", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "ApproveByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("fk_approvals_users_approve_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Client")
                        .WithMany("Approvals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approvals_clients_client_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approvals_users_requested_by_user_id");

                    b.Navigation("ApproveByUser");

                    b.Navigation("Client");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.BookingCoverages", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_booking_coverages_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ClientDocuments", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Clients")
                        .WithMany("ClientDocuments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_documents_clients_clients_id");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Clients", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_users_requested_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.BookingCoverages", "BookingCoverages")
                        .WithMany()
                        .HasForeignKey("BookingCoverageId")
                        .HasConstraintName("fk_clients_booking_coverages_booking_coverages_id");

                    b.HasOne("RDF.Arcana.API.Domain.BusinessAddress", "BusinessAddress")
                        .WithMany()
                        .HasForeignKey("BusinessAddressId")
                        .HasConstraintName("fk_clients_business_address_business_address_id");

                    b.HasOne("RDF.Arcana.API.Domain.FixedDiscounts", "FixedDiscounts")
                        .WithMany()
                        .HasForeignKey("FixedDiscountId")
                        .HasConstraintName("fk_clients_fixed_discounts_fixed_discounts_id");

                    b.HasOne("RDF.Arcana.API.Domain.ModeOfPayment", "ModeOfPayments")
                        .WithMany()
                        .HasForeignKey("ModeOfPayment")
                        .HasConstraintName("fk_clients_mode_of_payments_mode_of_payments_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("fk_clients_users_modified_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.OwnersAddress", "OwnersAddress")
                        .WithMany()
                        .HasForeignKey("OwnersAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_address_owners_address_id");

                    b.HasOne("RDF.Arcana.API.Domain.StoreType", "StoreType")
                        .WithMany()
                        .HasForeignKey("StoreTypeId")
                        .HasConstraintName("fk_clients_store_types_store_type_id");

                    b.HasOne("RDF.Arcana.API.Domain.Terms", "Term")
                        .WithMany()
                        .HasForeignKey("Terms")
                        .HasConstraintName("fk_clients_terms_term_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", null)
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_clients_users_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.VariableDiscounts", "VariableDiscounts")
                        .WithMany()
                        .HasForeignKey("VariableDiscountsId")
                        .HasConstraintName("fk_clients_variable_discounts_variable_discounts_id");

                    b.Navigation("BookingCoverages");

                    b.Navigation("BusinessAddress");

                    b.Navigation("FixedDiscounts");

                    b.Navigation("ModeOfPayments");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("OwnersAddress");

                    b.Navigation("RequestedByUser");

                    b.Navigation("StoreType");

                    b.Navigation("Term");

                    b.Navigation("VariableDiscounts");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Company", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Company", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_companies_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Department", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Department", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departments_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Discount", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Discount", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discounts_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.FixedDiscounts", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Clients")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fixed_discounts_clients_clients_id");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.FreebieItems", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Items", "Items")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_freebie_items_items_item_id");

                    b.HasOne("RDF.Arcana.API.Domain.FreebieRequest", "FreebieRequest")
                        .WithMany("FreebieItems")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_freebie_items_freebie_requests_request_id");

                    b.Navigation("FreebieRequest");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.FreebieRequest", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Approvals", "Approvals")
                        .WithMany("FreebieRequest")
                        .HasForeignKey("ApprovalsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_freebie_requests_approvals_approvals_id");

                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Clients")
                        .WithMany("FreebiesRequests")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_freebie_requests_clients_client_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_freebie_requests_users_requested_by_user_id");

                    b.Navigation("Approvals");

                    b.Navigation("Clients");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Items", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Items", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_users_added_by");

                    b.HasOne("RDF.Arcana.API.Domain.MeatType", "MeatType")
                        .WithMany()
                        .HasForeignKey("MeatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_meat_types_meat_type_id");

                    b.HasOne("RDF.Arcana.API.Domain.ProductSubCategory", "ProductSubCategory")
                        .WithMany()
                        .HasForeignKey("ProductSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_product_sub_categories_product_sub_category_id");

                    b.HasOne("RDF.Arcana.API.Domain.Uom", "Uom")
                        .WithMany("Items")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_uoms_uom_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("MeatType");

                    b.Navigation("ProductSubCategory");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ListingFee", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Approvals", "Approvals")
                        .WithMany("ListingFee")
                        .HasForeignKey("ApprovalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_listing_fees_approvals_approvals_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("fk_listing_fees_users_approved_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_listing_fees_clients_client_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_listing_fees_users_requested_by_user_id");

                    b.Navigation("Approvals");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Client");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ListingFeeItems", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Items", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_listing_fee_items_items_item_id");

                    b.HasOne("RDF.Arcana.API.Domain.ListingFee", "ListingFee")
                        .WithMany("ListingFeeItems")
                        .HasForeignKey("ListingFeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_listing_fee_items_listing_fees_listing_fee_id");

                    b.Navigation("Item");

                    b.Navigation("ListingFee");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Location", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Location", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.MeatType", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.MeatType", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meat_types_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ModeOfPayment", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mode_of_payments_users_added_by_user_id");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductCategory", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.ProductCategory", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_categories_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductSubCategory", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.ProductSubCategory", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_sub_categories_users_added_by");

                    b.HasOne("RDF.Arcana.API.Domain.ProductCategory", "ProductCategory")
                        .WithMany("ProductSubCategory")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_sub_categories_product_categories_product_category_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.StoreType", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("fk_store_types_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("fk_store_types_users_modified_by");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.TermDays", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.TermDays", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_term_days_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.TermOptions", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_term_options_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Clients")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_term_options_clients_clients_id");

                    b.HasOne("RDF.Arcana.API.Domain.TermDays", "TermDays")
                        .WithMany()
                        .HasForeignKey("TermDaysId")
                        .HasConstraintName("fk_term_options_term_days_term_days_id");

                    b.HasOne("RDF.Arcana.API.Domain.Terms", "Terms")
                        .WithMany("TermOptions")
                        .HasForeignKey("TermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_term_options_terms_terms_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Clients");

                    b.Navigation("TermDays");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Terms", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_terms_users_added_by_user_id");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Uom", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Uom", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_uoms_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.User", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.User", "AddedBy")
                        .HasConstraintName("fk_users_users_added_by");

                    b.HasOne("RDF.Arcana.API.Domain.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_users_companies_company_id");

                    b.HasOne("RDF.Arcana.API.Domain.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_users_departments_department_id");

                    b.HasOne("RDF.Arcana.API.Domain.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_users_locations_location_id");

                    b.HasOne("RDF.Arcana.API.Domain.UserRoles", "UserRoles")
                        .WithMany("Users")
                        .HasForeignKey("UserRolesId")
                        .HasConstraintName("fk_users_user_roles_user_roles_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Location");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.UserPasswordHistory", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", null)
                        .WithMany("UserPasswordHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_password_histories_users_user_id");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.UserRoles", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.UserRoles", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Approvals", b =>
                {
                    b.Navigation("FreebieRequest");

                    b.Navigation("ListingFee");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Clients", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("ClientDocuments");

                    b.Navigation("FreebiesRequests");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.FreebieRequest", b =>
                {
                    b.Navigation("FreebieItems");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ListingFee", b =>
                {
                    b.Navigation("ListingFeeItems");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Location", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductCategory", b =>
                {
                    b.Navigation("ProductSubCategory");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Terms", b =>
                {
                    b.Navigation("TermOptions");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Uom", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.User", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("UserPasswordHistory");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.UserRoles", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
